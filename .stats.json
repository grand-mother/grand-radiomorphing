{"lines": {"blank": 297, "comment": 61, "docstring": 430, "code": 1170}, "pep8": {"count": 433, "categories": [["6", "E114", "indentation is not a multiple of four (comment)"], ["6", "E116", "unexpected indentation (comment)"], ["1", "E127", "continuation line over-indented for visual indent"], ["1", "E261", "at least two spaces before inline comment"], ["147", "E265", "block comment should start with '# '"], ["1", "E266", "too many leading '#' for block comment"], ["4", "E402", "module level import not at top of file"], ["244", "E501", "line too long (95 > 79 characters)"], ["1", "E722", "do not use bare 'except'"], ["3", "E741", "ambiguous variable name 'l'"], ["19", "W291", "trailing whitespace"]]}, "doc": {"statistics": {"grand_radiomorphing/utils.py": {"tokens": {"load_trace": [7, ["Undocumented parameter `directory`", "Undocumented parameter `index`", "Undocumented parameter `suffix`"]], "getn": [24, ["Undocumented parameter `h`"]], "getCerenkovAngle": [45, ["Undocumented parameter `h`"]], "get_integratedn": [62, ["Undocumented parameter `injh2`", "Undocumented parameter `position`", "Undocumented parameter `zen2`"]], "mag": [131, ["Undocumented parameter `x`"]]}, "n_errors": 9, "n_tokens": 22}, "grand_radiomorphing/frame.py": {"tokens": {"get_rotation": [6, ["Undocumented parameter `zen`", "Undocumented parameter `az`", "Undocumented parameter `bfieldangle`", "Undocumented parameter `phigeo`"]], "UVWGetter": [36, ["Undocumented parameter `cz`", "Undocumented parameter `phigeo`", "Undocumented parameter `bfieldangle`", "Undocumented parameter `zen`", "Undocumented parameter `cy`", "Undocumented parameter `az`", "Undocumented parameter `cx`"]], "XYZGetter": [61, ["Undocumented parameter `cz`", "Undocumented parameter `phigeo`", "Undocumented parameter `bfieldangle`", "Undocumented parameter `zen`", "Undocumented parameter `cy`", "Undocumented parameter `az`", "Undocumented parameter `cx`"]]}, "n_errors": 18, "n_tokens": 23}, "grand_radiomorphing/core.py": {"tokens": {"_ProjectPointOnLine": [25, ["Undocumented parameter `a`", "Undocumented parameter `b`", "Missing description", "Undocumented parameter `p`"]], "_ProjectPointOnPlane": [35, ["Undocumented parameter `p`", "Missing description", "Undocumented parameter `a`", "Undocumented parameter `d`", "Undocumented parameter `b`"]], "interpolate": [43, ["Undocumented parameter `injection_height`", "Undocumented parameter `azimuth`", "Undocumented parameter `zenith`", "Undocumented parameter `path2`", "Undocumented parameter `path0`", "Undocumented parameter `path1`", "Undocumented parameter `scaled`"]], "process": [758, ["Undocumented parameter `out_dir`", "Undocumented parameter `antennas`", "Undocumented parameter `sim_dir`", "Undocumented parameter `shower`"]]}, "n_errors": 20, "n_tokens": 24}, "grand_radiomorphing/interpolation.py": {"tokens": {"unwrap": [56, ["Undocumented parameter `phi`", "Undocumented parameter `ontrue`"]], "interpolate_trace": [85, ["Undocumented parameter `x2`", "Undocumented parameter `xdes`", "Undocumented parameter `flow`", "Undocumented parameter `zeroadding`", "Undocumented parameter `t1`", "Undocumented parameter `fhigh`", "Undocumented parameter `t2`", "Undocumented parameter `x1`", "Undocumented parameter `upsampling`", "Undocumented parameter `ontrue`", "Undocumented parameter `trace1`", "Undocumented parameter `trace2`"]]}, "n_errors": 14, "n_tokens": 19}, "grand_radiomorphing/scaling.py": {"tokens": {"root_dir": [12, ["Missing description"]], "_getAirDensity": [20, ["Undocumented parameter `h`"]], "_getXmax": [45, ["Undocumented parameter `primarytype`", "Undocumented parameter `energy`", "Undocumented parameter `zen2`"]], "_dist_decay_Xmax": [77, ["Undocumented parameter `injh2`", "Undocumented parameter `Xmax_primary`", "Undocumented parameter `zen2`"]], "_scalingfactors": [127, ["Undocumented parameter `phigeo`", "Undocumented parameter `injh1`", "Undocumented parameter `zen2`", "Undocumented parameter `primary`", "Undocumented parameter `altitude`", "Undocumented parameter `zen1`", "Undocumented parameter `thetageo`", "Undocumented parameter `injh2`", "Undocumented parameter `az1`", "Undocumented parameter `E2`", "Undocumented parameter `az2`", "Undocumented parameter `E1`"]], "_scalingpulse": [220, ["Undocumented parameter `phigeo`", "Undocumented parameter `injh1`", "Undocumented parameter `zen2`", "Undocumented parameter `path`", "Undocumented parameter `primary`", "Undocumented parameter `l`", "Undocumented parameter `dist1`", "Undocumented parameter `positions`", "Undocumented parameter `altitude`", "Undocumented parameter `zen1`", "Undocumented parameter `thetageo`", "Undocumented parameter `injh2`", "Undocumented parameter `az1`", "Undocumented parameter `E2`", "Undocumented parameter `az2`", "Undocumented parameter `E1`"]], "_scale_run": [446, ["Undocumented parameter `sim_dir`", "Undocumented parameter `az1`", "Undocumented parameter `injh1`", "Undocumented parameter `run`", "Undocumented parameter `dist1`", "Undocumented parameter `altitude`", "Undocumented parameter `zen1`", "Undocumented parameter `az2`", "Undocumented parameter `injh2`", "Undocumented parameter `primary`", "Undocumented parameter `E2`", "Undocumented parameter `zen2`", "Undocumented parameter `E1`"]], "scale": [560, ["Undocumented parameter `injection_height`", "Undocumented parameter `sim_dir`", "Undocumented parameter `energy`", "Undocumented parameter `azimuth`", "Undocumented parameter `altitude`", "Undocumented parameter `zenith`", "Undocumented parameter `primary`"]]}, "n_errors": 56, "n_tokens": 75}}, "doc": "Produce radio signals with Radio Morphing", "classes": {}, "definitions": {}, "functions": {"scale": [560, "Scale all simulated traces to the shower parameters\n\nArguments\n---------\n    sim_dir: str\n        path to older containing the files of the reference shower\n    primary: str\n        primary for target shower, for now it just excepts 'electron' or 'pion'\n    energy: float\n        primary energy of target shower in EeV\n    zenith: float\n        zenith angle of primary of target shower in radian\n    azimuth: float\n        azimuth angle of primary of target shower in radian\n    injection_height: float\n        injectionheight of particle for target shower in meters\n    altitude: float\n        usually same as injh2, but there could be exceptions\n", {"parameters": {"sim_dir": null, "primary": null, "energy": null, "zenith": null, "azimuth": null, "injection_height": null, "altitude": null}, "prototype": "sim_dir, primary, energy, zenith, azimuth, injection_height, altitude", "returns": [["-", "Start the scaling and isometry process of the simulated reference shower acoording to target shower parameters", ""]]}, "grand_radiomorphing/scaling.py"], "interpolate": [43, "Interpolate all traces from the (rescaled) closest neighbours\n    - first the closest neighbours to a desired antenna positions get identified,\n        traces and positions are handed over to the interpolation function,\n        calculated signal traces get stored.          \n\nArgs:\n    path0 (str): path to file with desired antenna positions\n    path1 (str): path to the simulations\n    path2 (str): path to the folder for final traces\n    zenith (float): zenith angle of the morphed shower, in degrees\n    azimuth (float): azimuth angle of the morphed shower, in degrees\n    scaled (bool): flag for interpolating from a non scaled shower\nreturns:\n    stores the interpolated signal trace in a data file ", {"parameters": {"path0": null, "path1": null, "path2": null, "zenith": null, "azimuth": null, "injection_height": null, "scaled": null}, "prototype": "path0, path1, path2, zenith=None, azimuth=None, injection_height=None, scaled=True"}, "grand_radiomorphing/core.py"], "process": [758, "Rescale and interpolate the radio traces for all antennas \n    - start the Radio Morphing procedure\n\nArgs:\n    sim_dir (str): path to the simulated traces\n    shower (dict): properties of the requested shower\n    antennas (str): path the requested antenna positions\n    out_dir (str): path where the output traces should be dumped", {"parameters": {"sim_dir": null, "shower": null, "antennas": null, "out_dir": null}, "prototype": "sim_dir, shower, antennas, out_dir"}, "grand_radiomorphing/core.py"]}, "imports": {"1": {"scaling": [["scale", "scale"]], "core": [["interpolate", "interpolate"], ["process", "process"]]}}, "path": "grand_radiomorphing/__init__.py", "__all__": ["core", "frame", "interpolation", "scaling", "utils"], "modules": {"utils": {"doc": "File collecting useful functions", "classes": {}, "definitions": {}, "functions": {"load_trace": [7, "Load data from a trace file\n\nArgs:\n    directory (str): path to file\n    index (ind): index number of antenna\n    suffix (str): optional, suffix of file\n\nReturns:\n    numpy array", {"parameters": {"directory": null, "index": null, "suffix": null}, "prototype": "directory, index, suffix='.trace'"}], "getn": [24, "Get the refractive index\n\n    Reference:\n     Zhaires (see email M. Tueros 25/11/2016)\n\nArguments\n---------\n   h: float\n         height in meters at which one wants to have the refractive index\n", {"parameters": {"h": null}, "prototype": "h", "returns": [["float", "refractive angle", ""]]}], "getCerenkovAngle": [45, "Get the Cerenkov angle\n\nArguments\n---------\n   h: float\n         height in meters at which one wants to have the Cherenkov angle\n", {"parameters": {"h": null}, "prototype": "h", "returns": [["float", "Cherenkov angle in radian", ""]]}], "get_integratedn": [62, "Returns the effectiv/integrated refractive index at a specific height.\n\nArguments\n---------\n   zen2: float\n      zenith angle in radian at the starting point at height injh2\n   injh2: float\n      height in meters of the starting point, assuming it is defines as (0,0,injh2)\n     position: numpy array\n         defines endposition for integration (= observer position)", {"parameters": {"zen2": null, "injh2": null, "position": null}, "prototype": "zen2, injh2, position", "returns": [["float", "effectiv referactive index along the shower trajectory", "n"]]}], "mag": [131, "Calculate absolute value of x\n\nArguments\n---------\n  x: numpy array, floats\n        vector\n", {"parameters": {"x": null}, "prototype": "x", "returns": [["float", "absolute value of vector", ""]]}]}, "imports": {}, "path": "grand_radiomorphing/utils.py"}, "frame": {"doc": "Collection of functions used for local frame transforms for pulse shape computations.", "classes": {}, "definitions": {}, "functions": {"get_rotation": [6, "Utility function for getting the rotation matrix between frames\n\nArguments\n---------\n    zen: float\n        zenith angles of primary in radian\n    az: float\n        azmimuth angle in radian\n    phigeo, bfieldangle: floats\n        magnetic field angles in radian", {"parameters": {"zen": null, "az": null, "phigeo": null, "bfieldangle": null}, "prototype": "zen, az, phigeo, bfieldangle", "returns": []}], "UVWGetter": [36, "Closure for getting coordinates in the shower frame.\n\nArguments\n---------\n    cx,cy,cz: floats\n        positions vector, in meters\n    zen: float\n        zenith angles of primary in radian\n    az: float\n        azmimuth angle in radian\n    phigeo, bfieldangle: floats\n        magnetic field angles in radian", {"parameters": {"cx": null, "cy": null, "cz": null, "zen": null, "az": null, "phigeo": null, "bfieldangle": null}, "prototype": "cx, cy, cz, zen, az, phigeo, bfieldangle", "returns": []}], "XYZGetter": [61, "Closure for getting back to the main frame\n\nArguments\n---------\n    cx,cy,cz: floats\n        positions vector, in meters\n    zen: float\n        zenith angles of primary in radian\n    az: float\n        azmimuth angle in radian\n    phigeo, bfieldangle: floats\n        magnetic field angles in radian", {"parameters": {"cx": null, "cy": null, "cz": null, "zen": null, "az": null, "phigeo": null, "bfieldangle": null}, "prototype": "cx, cy, cz, zen, az, phigeo, bfieldangle", "returns": []}]}, "imports": {}, "path": "grand_radiomorphing/frame.py"}, "core": {"doc": "Start the interpolation of the signal at a desired antenna position \non the basis of the rescaled electric field traces and the antenna position after the isometry.\n#\nNotes: \nThis script does the preperation for a interpolation of a complete pulse at any antenna position you desire.\nTherfore, you have to hand over a list of antenna position you would like to have, a file containing the \nsimulations which should be use (names of the planes) and a path whre to find these simlations\nthe script calculates all the prjections on the exiting planes which are needed, and hand the traces \nand positions over to the interpolation script which performs the interpoaltion alwys in between two positions\nwhether you wanna use filtered traces is set in this script by hand at the beginning\nTt returns files (t, Ex,Ey,Ez) in a folder, named InterpoaltedSignals, if it exists. ", "classes": {}, "definitions": {}, "functions": {"interpolate": [43, "Interpolate all traces from the (rescaled) closest neighbours\n    - first the closest neighbours to a desired antenna positions get identified,\n        traces and positions are handed over to the interpolation function,\n        calculated signal traces get stored.          \n\nArgs:\n    path0 (str): path to file with desired antenna positions\n    path1 (str): path to the simulations\n    path2 (str): path to the folder for final traces\n    zenith (float): zenith angle of the morphed shower, in degrees\n    azimuth (float): azimuth angle of the morphed shower, in degrees\n    scaled (bool): flag for interpolating from a non scaled shower\nreturns:\n    stores the interpolated signal trace in a data file ", {"parameters": {"path0": null, "path1": null, "path2": null, "zenith": null, "azimuth": null, "injection_height": null, "scaled": null}, "prototype": "path0, path1, path2, zenith=None, azimuth=None, injection_height=None, scaled=True"}], "process": [758, "Rescale and interpolate the radio traces for all antennas \n    - start the Radio Morphing procedure\n\nArgs:\n    sim_dir (str): path to the simulated traces\n    shower (dict): properties of the requested shower\n    antennas (str): path the requested antenna positions\n    out_dir (str): path where the output traces should be dumped", {"parameters": {"sim_dir": null, "shower": null, "antennas": null, "out_dir": null}, "prototype": "sim_dir, shower, antennas, out_dir"}]}, "imports": {}, "path": "grand_radiomorphing/core.py"}, "interpolation": {"doc": "Script to perform an interpolation between to electric field traces at a desired position\n(called by core.py)\n\nIt needs as input antenna position 1 and 2, their traces (filtered or not) in one component, their time , and the desired antenna position\nand returns the trace ( in x,y,z coordinate system) and the time from the desired antenna position\nZeroadding and upsampling of the signal are optional functions\n\nIMPORTANT NOTE:\nThe interpolation of the phases includes the\ninterpolation of the signal arrival time. A linear interpolation implies a plane radio\nemission wave front, which is a simplification as it is hyperbolic in shape. However, the wave front can be estimated as a plane between two simu-\nlated observer positions for a sufficiently dense grid of observers, as then parts of\nthe wave front are linear on small scales.\n\nThis script bases on the diploma thesis of Ewa Holt (KIT, 2013) in the context of AERA/AUGER. It is based on the interpolation of the amplitude and the pahse in the frequency domain. \nThis can lead to misidentifiying of the correct phase. We are working on the interplementaion on a more robust interpolation of the signal.\nFeel free to include it if you have some time to work on it. The script is completely modular so that single parts can be substitute easily.", "classes": {}, "definitions": {}, "functions": {"unwrap": [56, "Unwrap the phase to a strictly decreasing function.\n\nArguments\n---------\n    phi: numpy array, float\n        phase of the signal trace", {"parameters": {"phi": null, "ontrue": null}, "prototype": "phi, ontrue=None", "returns": [["numpy array, float", "unwarpped phase of the signal trace", "phi_unwrapped"]]}], "interpolate_trace": [85, "Interpolation of signal traces at the specific position in the frequency domain\n\nArguments\n---------\n        t1: numpy array, float\n            time in ns of antenna 1\n        trace1: numpy array, float\n            single component of the electric field's amplitude of antenna 1\n        x1: numpy array, float\n            position of antenna 1\n        t2: numpy array, float\n            time in ns of antenna 2\n        trace2: numpy array, float\n            single component of the electric field's amplitude of antenna 2\n        x2: numpy array, float\n            position of antenna 2\n        xdes: numpy arry, float\n            antenna position for which trace is desired, in meters\n        upsampling: str\n            optional, True/False, performs upsampling of the signal, by a factor 8\n        zeroadding: str\n            optional, True/False, adds zeros at the end of the trace of needed\n        ontrue: str\n            optional, True/False, just a plotting command\n        flow, fhigh: floats\n            optional, define the frequency range for plotting, if desired (DISPLAY=True/False)\n\n", {"parameters": {"t1": null, "trace1": null, "x1": null, "t2": null, "trace2": null, "x2": null, "xdes": null, "upsampling": null, "zeroadding": null, "ontrue": null, "flow": null, "fhigh": null}, "prototype": "t1, trace1, x1, t2, trace2, x2, xdes, upsampling=None, zeroadding=None, ontrue=None, flow=60000000.0, fhigh=200000000.0", "returns": [["numpy array, float", "time for signal at desired antenna position in ns", "xnew"], ["numpy array, float", "interpolated electric field component at desired antenna position", "tracedes"]]}]}, "imports": {}, "path": "grand_radiomorphing/interpolation.py"}, "scaling": {"doc": "Performs the scaling of given electric field traces and the isometry of the antenna positions for a reference shower according to the parameters of a target shower", "classes": {}, "definitions": {"root_dir": [12, "", null]}, "functions": {"scale": [560, "Scale all simulated traces to the shower parameters\n\nArguments\n---------\n    sim_dir: str\n        path to older containing the files of the reference shower\n    primary: str\n        primary for target shower, for now it just excepts 'electron' or 'pion'\n    energy: float\n        primary energy of target shower in EeV\n    zenith: float\n        zenith angle of primary of target shower in radian\n    azimuth: float\n        azimuth angle of primary of target shower in radian\n    injection_height: float\n        injectionheight of particle for target shower in meters\n    altitude: float\n        usually same as injh2, but there could be exceptions\n", {"parameters": {"sim_dir": null, "primary": null, "energy": null, "zenith": null, "azimuth": null, "injection_height": null, "altitude": null}, "prototype": "sim_dir, primary, energy, zenith, azimuth, injection_height, altitude", "returns": [["-", "Start the scaling and isometry process of the simulated reference shower acoording to target shower parameters", ""]]}]}, "imports": {}, "path": "grand_radiomorphing/scaling.py"}}}}